{"version":3,"file":"static/js/510.9340eac5.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/Components/Profile/Profile.module.css?f51d","webpack://samurai-way/./src/Components/Profile/MyPost/MyPost.module.css?9e2c","Components/Profile/ProfileInfo/PrifileData/ProfileData.tsx","Components/Profile/ProfileInfo/PrifileData/FormData.tsx","Components/Profile/ProfileInfo/ProfileInfo.tsx","Components/Profile/MyPost/MyPost.tsx","Components/Profile/MyPost/MyPostContainer.tsx","Components/Profile/ProfileInfo/ProfileStatus..tsx","Components/Profile/ProfileInfo/Profile.tsx","Components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"content\":\"Profile_content__mO3zk\",\"city_img\":\"Profile_city_img__8Ect9\",\"style\":\"Profile_style__mz0wx\"};","// extracted by mini-css-extract-plugin\nexport default {\"img\":\"MyPost_img__wPj40\",\"style\":\"MyPost_style__SQ6qQ\",\"style_Button\":\"MyPost_style_Button__WFAmx\",\"profile_photo\":\"MyPost_profile_photo__gTxQ+\",\"boldText\":\"MyPost_boldText__cz5Cw\"};","import React from 'react';\nimport s from \"../../MyPost/MyPost.module.css\";\nimport {ProfileType} from \"../../../../API/Profile-api\";\nimport {ContactType} from \"../ProfileInfo\";\n\ntype ProfileDataType = {\n    profileInfo: ProfileType\n    contact: ContactType\n    isOwners: boolean\n    ActivateEditMode: () => void\n}\n\nexport const ProfileData: React.FC<ProfileDataType> = ({\n                                                           profileInfo, contact,\n                                                           isOwners, ActivateEditMode, ...props\n                                                       }) => {\n    return (\n        <div>\n            {isOwners && <button onClick={ActivateEditMode}>edit</button>}\n            <div><span className={s.boldText}>FullName:</span>{profileInfo.fullName}</div>\n            <div><span className={s.boldText}>LookingJob:</span>{profileInfo.lookingForAJob ? 'yes' : 'no'}\n            </div>\n            <div><span className={s.boldText}>lookingForAJobDescription:</span>{profileInfo.lookingForAJobDescription}\n            </div>\n            <div>\n                <b>Contact</b> :{Object.keys(contact).map((key) => {\n                    return <Contact key={key} contactTitle={key} contactValue={contact[key]}/>\n                }\n            )}\n            </div>\n        </div>\n\n    );\n};\n\nconst Contact: React.FC<ContactType> = ({contactTitle, contactValue, ...props}) => {\n    return <div>\n        <b>{contactTitle}</b>:{contactValue}\n    </div>\n}\n\n","import React from 'react';\nimport s from \"../../MyPost/MyPost.module.css\";\nimport {ProfileType} from \"../../../../API/Profile-api\";\nimport {ContactType} from \"../ProfileInfo\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {required} from \"../../../../utils/validators/validators\";\nimport FormControls from \"../../../FormControls/FormControls\";\nimport style from \"../../../FormControls/FormControls.module.css\";\n\n\n\ntype ProfileDataType = {\n    initialValues: ProfileType\n    contact :ContactType\n    changeProfileData:(formData:FormDataProfileType)=>void\n}\n\nexport type FormDataProfileType ={\n    lookingForAJob: boolean\n    lookingForAJobDescription: string\n    fullName: string\n    contacts: {\n        github: string\n        vk: string\n        facebook: string\n        instagram: string\n        twitter: string\n        website: string\n        youtube: string\n        mainLink: string\n    }\n\n\n\n}\n\nexport const FormDataProfile:React.FC<ProfileDataType> = ({ initialValues,contact,changeProfileData,...props}) => {\n\n\n    const onSubmit=(formData:FormDataProfileType)=> {\n\n        changeProfileData(formData)\n\n    }\n\n\n    return (\n        <div>\n            <ProfileReduxForm  initialValues={initialValues} onSubmit={onSubmit}/>\n        </div>\n\n    );\n};\n\n\n\nconst ProfileForm: React.FC<InjectedFormProps<FormDataProfileType>> = ({error,...props})=> {\n\n    const contacts = props.initialValues.contacts as ContactType\n\n\n    return (\n        <div className={s.auth}>\n            <form onSubmit={props.handleSubmit}>\n                <div><button>save</button></div>\n                {error &&\n                    <div  className={style.error}>{error}</div>}\n                <div>\n                  <b>FullName</b> : <span> <Field validate={[required]} placeholder={'fullName'} name={'fullName'} component={FormControls} /></span>\n\n                </div>\n                <div>\n                    <Field  placeholder={'lookingForAJob'} name={'lookingForAJob'} component={'input'}  type={'checkbox'} />\n                </div>\n                <div>\n                    <Field validate={[required]} placeholder={'lookingForAJobDescription'} name={'lookingForAJobDescription'}   component={FormControls}/>\n                </div>\n\n\n                <div>\n                    <div>\n\n                        <b>Contacts</b> :<div>\n                        {Object.keys(contacts).map((key) => {\n                                return  <b>{key}: <Field   key={key} placeholder={key} name={\"contacts.\"+ key}   component={FormControls}/></b>\n                            }\n\n                        )}\n\n                    </div>\n                    </div>\n\n                </div>\n\n            </form>\n\n\n        </div>\n    )\n}\n\n\n\nconst ProfileReduxForm = reduxForm<FormDataProfileType>({form:\"profile\"})(ProfileForm)\n\n\n\n","import React, {ChangeEvent, useState} from 'react';\nimport s from \"../MyPost/MyPost.module.css\";\nimport Vikings from \"../../../image/Vikings.png\";\nimport {ProfileType} from \"../../../API/Profile-api\";\nimport {ProfileData} from \"./PrifileData/ProfileData\";\nimport {FormDataProfile, FormDataProfileType} from \"./PrifileData/FormData\";\n\n\ntype ProfileInfoType = {\n    profileInfo: ProfileType\n    isOwners: boolean\n    savePhoto: (photo: FormData) => void\n    contact: ContactType\n    saveProfile: (formData: FormDataProfileType) => void\n    EditMode:boolean\n    changeEditMode:()=>void\n}\n\nexport type ContactType = {\n    [key: string]: string;\n\n}\n\nexport const ProfileInfo: React.FC<ProfileInfoType> = ({\n                                                           profileInfo, isOwners,\n                                                           savePhoto, contact,\n                                                           saveProfile,EditMode,\n                                                           changeEditMode, ...props\n                                                       }) => {\n\n    const onChangePhoto = (e: ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files && e.target.files.length > 0) {\n            const file = e.target.files[0];\n            const formData = new FormData();\n            formData.append('image', file);\n            savePhoto(formData);\n        }\n    }\n\n\n    const ActivateEditMode = () => {\n        changeEditMode()\n\n    }\n\n    const changeProfileData = (formData: FormDataProfileType) => {\n            saveProfile(formData)\n\n    }\n\n    return (\n        <div className={s.style}>\n            <div>\n\n                {profileInfo.photos.small\n                    ? <img src={profileInfo.photos.small} className={s.profile_photo}/>\n                    : <img className={s.img} src={Vikings}/>\n\n                }\n\n                {EditMode\n                    ?\n                    <FormDataProfile initialValues={profileInfo} contact={contact}\n                                     changeProfileData={changeProfileData}/>\n                    : <ProfileData profileInfo={profileInfo} contact={contact} isOwners={isOwners}\n                                   ActivateEditMode={ActivateEditMode}/>}\n\n\n                <span>\n     {isOwners && <input type={\"file\"} onChange={onChangePhoto}/>}\n              </span>\n            </div>\n        </div>\n    );\n};\n\n\n\n","import React, {ChangeEvent} from 'react';\nimport  s from './MyPost.module.css'\nimport {MyPostType} from \"./MyPostContainer\";\n\n\n\n\n\n\n\n\n\nexport  const MyPost = React.memo( (props:MyPostType) => {\n\n\nconsole.log('render')\n\n    const AddPost = ()=> {\n            props.addPost(props.pageReducer.newPostText)\n\n\n    }\n\n\nconst onChangeHandler = (e:ChangeEvent<HTMLInputElement>)=> {\n        let newPost =e.currentTarget.value\n        props.updatePost(newPost)\n\n}\n\n\n    return (\n        <div>\n         <div className={s.style}>{\n             props.pageReducer.post.map((p)=>{\n                 return (\n                     <li key={p.id}>\n                         {p.message}{p.likeCount}\n                     </li>\n                 )\n             })\n         }</div>\n            <input onChange={onChangeHandler} value={props.pageReducer.newPostText} />\n\n            <button  onClick={AddPost} className={s.style_Button}>Add Post</button>\n\n        </div>\n    );\n});\n\n","import React from 'react';\nimport {MyPost} from \"./MyPost\";\nimport {\n    AddPostActionCreator, InitializationStatePageType,\n    UpdateTextActionCreator\n} from \"../../../Redux/pageReducer\";\nimport { StoreType} from \"../../../Redux/redux-store\";\nimport {connect} from \"react-redux\";\nimport {Dispatch} from \"redux\";\n\n\n\n\n\ntype mapStateToPropsType ={\n    pageReducer:InitializationStatePageType\n}\n\nconst mapStateToProps =(state:StoreType):mapStateToPropsType=> {\n    return {\n        pageReducer:state.pageReducer,\n\n\n    }\n}\n\ntype mapDispatchToPropsType ={\n    updatePost:(newPost:string)=>void\n    addPost:(newPostText:string)=>void\n\n}\n\nexport type MyPostType = mapDispatchToPropsType & mapStateToPropsType\n\nconst mapDispatchToProps =(dispatch:Dispatch):mapDispatchToPropsType=> {\n    return {\n        updatePost:(newPost:string)=>{\n            dispatch(UpdateTextActionCreator(newPost))\n        },\n        addPost:(newPostText:string)=> {\n            dispatch(AddPostActionCreator(newPostText))\n        },\n\n    }\n}\n\n\nexport const MyPostContainer =connect(mapStateToProps,mapDispatchToProps)(MyPost)","import React, {ChangeEvent, useState} from 'react';\nimport s from \"../MyPost/MyPost.module.css\";\n\n\ntype ProfileStatusType = {\n    changeStatusCallback:(e:string)=>void\n    status:string\n}\n\n\nexport const ProfileStatus:React.FC<ProfileStatusType> = ({status,changeStatusCallback,...props}) => {\n\n\n    const [editMode,setEditMode]=useState(false)\n\n    const changeStatus =(e:ChangeEvent<HTMLInputElement>)=> {\n        changeStatusCallback(e.currentTarget.value)\n    }\n\n    const changeEditMode =()=> {\n        setEditMode(!editMode)\n    }\n\n    return (\n        <div className={s.style}>\n            {editMode\n                ?  <input onBlur={changeEditMode} value={status} onChange={changeStatus} autoFocus/>\n                : <span onDoubleClick={changeEditMode}><span className={s.boldText}>Status:</span>{status || 'No Status'}</span>}\n\n\n        </div>\n    );\n};\n\n","import React from 'react';\nimport city from \"../../../image/iceland.jpg\";\nimport s from '../Profile.module.css'\nimport {ProfileInfo} from \"./ProfileInfo\";\nimport {MyPostContainer} from \"../MyPost/MyPostContainer\";\nimport {ProfileType} from \"../../../API/Profile-api\";\nimport {ProfileStatus} from \"./ProfileStatus.\";\nimport {FormDataProfileType} from \"./PrifileData/FormData\";\n\n\ntype ProfileTypeProfile = {\n    profileInfo: ProfileType\n    status: string\n    changeStatusCallback: (e: string) => void\n    isOwners: boolean\n    savePhoto:(photo: FormData)=>void\n    saveProfile:(formData:FormDataProfileType)=>void\n    editMode:boolean\n    changeEditMode:()=>void\n}\n\n\nexport const Profile: React.FC<ProfileTypeProfile> = ({\n                                                          profileInfo,\n                                                          status,\n                                                          changeStatusCallback,\n                                                          isOwners,\n                                                          savePhoto,\n                                                          saveProfile,\n                                                          editMode,\n                                                          changeEditMode,...props\n                                                      }) => {\n\n    const changeStatus = (e: string) => {\n        changeStatusCallback(e)\n    }\n\n\n\n    return (\n        <div className={s.content}>\n            <div className={s.style}>\n                <img className={s.city_img} src={city}/>\n\n            </div>\n            <ProfileInfo profileInfo={profileInfo} isOwners={isOwners}\n                         savePhoto={savePhoto} contact={profileInfo.contacts}\n                         saveProfile={saveProfile} EditMode={editMode}\n                         changeEditMode={changeEditMode}\n            />\n            <ProfileStatus status={status} changeStatusCallback={changeStatus}/>\n            <MyPostContainer/>\n\n        </div>\n\n    );\n};","import React from 'react';\nimport {Profile} from \"./ProfileInfo/Profile\";\nimport {ProfileType} from \"../../API/Profile-api\";\nimport {connect} from \"react-redux\";\nimport {\n    EditModeAC,\n    ThunkChangStatus,\n    ThunkGetStatus,\n    ThunkGetUser,\n    ThunkSavePhoto,\n    ThunkSaveProfile\n} from \"../../Redux/pageReducer\";\nimport {AppDispatchType, StoreType} from \"../../Redux/redux-store\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\nimport withAuthRedirect from \"../Hoc/WithAuthRedirect\";\nimport {compose} from \"redux\";\nimport {FormDataProfileType} from \"./ProfileInfo/PrifileData/FormData\";\n\n\nclass ProfileContainer extends React.Component<WithRouterType> {\n\n    componentDidMount() {\n\n        let userId = this.props.match.params.userId\n\n\n        if (!userId) {\n            userId = this.props.authorizedUserID\n        }\n\n        this.props.setProfileInfo(userId)\n        this.props.setStatus(userId)\n\n\n    }\n\n    componentDidUpdate(prevProps: Readonly<WithRouterType>, prevState: Readonly<{}>, snapshot?: any) {\n\n    }\n\n    render() {\n\n        const ChangeStatus = (status: string) => {\n            this.props.changeStatus(status)\n        }\n\n        const SavePhoto = (photo: FormData) => {\n            this.props.savePhoto(photo)\n        }\n\n        const SaveProfile = (formData: FormDataProfileType) => {\n            this.props.saveProfile(formData)\n        }\n        return (\n            <div>\n                <Profile profileInfo={this.props.profileInfo}\n                         status={this.props.status}\n                         changeStatusCallback={ChangeStatus}\n                         isOwners={!this.props.match.params.userId}\n                         savePhoto={SavePhoto}\n                         saveProfile={SaveProfile}\n                         editMode={this.props.editMode}\n                         changeEditMode={this.props.changeEditMode}\n                />\n\n            </div>\n\n        );\n    }\n\n\n};\n\nexport type ProfileContainerType = mapDispatchToPropsType & mapStateToPropsType\n\ntype mapDispatchToPropsType = {\n    setProfileInfo: (userId: string) => void\n    setStatus: (userId: string) => void\n    changeStatus: (status: string) => void\n    savePhoto: (photo: FormData) => void\n    saveProfile: (formData: FormDataProfileType) => void\n    changeEditMode: () => void\n}\n\nconst mapDispatchToProps = (dispatch: AppDispatchType): mapDispatchToPropsType => {\n    return {\n        setProfileInfo: (userId: string) => {\n            return dispatch(ThunkGetUser(userId))\n        },\n        setStatus: (userId: string) => {\n            return dispatch(ThunkGetStatus(userId))\n        },\n        changeStatus: (status: string) => {\n            return dispatch(ThunkChangStatus(status))\n        },\n        savePhoto: (photo: FormData) => {\n            dispatch(ThunkSavePhoto(photo))\n        },\n        saveProfile: (formData: FormDataProfileType) => {\n            return dispatch(ThunkSaveProfile(formData))\n        },\n        changeEditMode: () => {\n            return dispatch(EditModeAC(true))\n        }\n\n    }\n\n}\n\ntype mapStateToPropsType = {\n    profileInfo: ProfileType\n    status: string\n    authorizedUserID: string\n    editMode: boolean\n\n\n}\n\nconst mapStateToProps = (state: StoreType): mapStateToPropsType => {\n    return {\n        profileInfo: state.pageReducer.profileInfo,\n        status: state.pageReducer.status,\n        authorizedUserID: state.authReducer.data.id,\n        editMode: state.pageReducer.editMode\n\n\n    }\n}\n\n\ntype PathParamsType = {\n    userId: string\n\n};\n\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect,\n    withRouter\n)(ProfileContainer)\n\ntype WithRouterType = RouteComponentProps<PathParamsType> & ProfileContainerType"],"names":["ProfileData","profileInfo","contact","isOwners","ActivateEditMode","onClick","className","s","fullName","lookingForAJob","lookingForAJobDescription","Object","keys","map","key","Contact","contactTitle","contactValue","FormDataProfile","initialValues","changeProfileData","ProfileReduxForm","onSubmit","formData","reduxForm","form","error","props","contacts","handleSubmit","style","Field","validate","required","placeholder","name","component","FormControls","type","ProfileInfo","savePhoto","saveProfile","EditMode","changeEditMode","photos","small","src","Vikings","onChange","e","target","files","length","file","FormData","append","MyPost","React","console","log","pageReducer","post","p","message","likeCount","id","newPost","currentTarget","value","updatePost","newPostText","addPost","MyPostContainer","connect","state","dispatch","UpdateTextActionCreator","AddPostActionCreator","ProfileStatus","status","changeStatusCallback","useState","editMode","setEditMode","onBlur","autoFocus","onDoubleClick","Profile","city","ProfileContainer","userId","this","match","params","authorizedUserID","setProfileInfo","setStatus","prevProps","prevState","snapshot","changeStatus","photo","compose","authReducer","data","ThunkGetUser","ThunkGetStatus","ThunkChangStatus","ThunkSavePhoto","ThunkSaveProfile","EditModeAC","withAuthRedirect","withRouter"],"sourceRoot":""}